generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Group {
  id           String        @id
  name         String
  currency     String        @default("$")
  createdAt    DateTime      @default(now())
  information  String?
  activities   Activity[]
  expenses     Expense[]
  participants Participant[]
}

model Participant {
  id              String           @id
  name            String
  groupId         String
  expensesPaidBy  Expense[]
  expensesPaidFor ExpensePaidFor[]
  group           Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Category {
  id       Int       @id @default(autoincrement())
  grouping String
  name     String
  Expense  Expense[]
}

model Expense {
  id                     String                @id
  title                  String
  amount                 Int
  paidById               String
  groupId                String
  isReimbursement        Boolean               @default(false)
  createdAt              DateTime              @default(now())
  splitMode              SplitMode             @default(EVENLY)
  expenseDate            DateTime              @default(dbgenerated("CURRENT_DATE")) @db.Date
  categoryId             Int                   @default(0)
  notes                  String?
  recurrenceRule         RecurrenceRule?       @default(NONE)
  recurringExpenseLinkId String?
  category               Category              @relation(fields: [categoryId], references: [id])
  group                  Group                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  paidBy                 Participant           @relation(fields: [paidById], references: [id], onDelete: Cascade)
  documents              ExpenseDocument[]
  paidFor                ExpensePaidFor[]
  recurringExpenseLink   RecurringExpenseLink?
}

model ExpenseDocument {
  id        String   @id
  url       String
  expenseId String?
  height    Int
  width     Int
  Expense   Expense? @relation(fields: [expenseId], references: [id])
}

model RecurringExpenseLink {
  id                    String    @id
  groupId               String
  currentFrameExpenseId String    @unique
  nextExpenseCreatedAt  DateTime?
  nextExpenseDate       DateTime
  currentFrameExpense   Expense   @relation(fields: [currentFrameExpenseId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([groupId, nextExpenseCreatedAt, nextExpenseDate(sort: Desc)])
}

model ExpensePaidFor {
  expenseId     String
  participantId String
  shares        Int         @default(1)
  expense       Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@id([expenseId, participantId])
}

model Activity {
  id            String       @id
  groupId       String
  time          DateTime     @default(now())
  activityType  ActivityType
  participantId String?
  expenseId     String?
  data          String?
  group         Group        @relation(fields: [groupId], references: [id])
}

enum SplitMode {
  EVENLY
  BY_SHARES
  BY_PERCENTAGE
  BY_AMOUNT
}

enum RecurrenceRule {
  NONE
  DAILY
  WEEKLY
  MONTHLY
}

enum ActivityType {
  UPDATE_GROUP
  CREATE_EXPENSE
  UPDATE_EXPENSE
  DELETE_EXPENSE
}
